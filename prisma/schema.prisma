generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id                    Int                    @id @default(autoincrement())
  prefix                String                 @db.VarChar(20)
  firstName             String                 @db.VarChar(100)
  lastName              String                 @db.VarChar(100)
  age                   Int
  phoneNumber           String                 @unique @db.VarChar(20)
  medicalRight          String?                @db.VarChar(100)
  chronicDiseases       String?
  drugAllergy           String?
  profileImageUrl       String?
  registeredAt          DateTime?              @default(now()) @db.Timestamp(6)
  createdAt             DateTime?              @default(now()) @db.Timestamp(6)
  updatedAt             DateTime?              @default(now()) @updatedAt @db.Timestamp(6)
  medicines             Medicine[]
  medicineConsumptions  MedicineConsumption[]
  medicineNotifications MedicineNotification[]
  prescriptions         Prescription[]

  @@index([phoneNumber], map: "idx_patients_phonenumber")
  @@map("patients")
}

model Medicine {
  id                    Int                    @id @default(autoincrement())
  patientId             Int
  medicineName          String                 @db.VarChar(200)
  medicineDetails       String?
  consumptionType       String                 @db.VarChar(100)
  quantity              Int
  currentStock          Int                    @default(0)
  dosage                Int
  morning               Boolean?               @default(false)
  afternoon             Boolean?               @default(false)
  evening               Boolean?               @default(false)
  beforeBed             Boolean?               @default(false)
  medicineImageUrl      String?
  isActive              Boolean?               @default(true)
  createdAt             DateTime?              @default(now()) @db.Timestamp(6)
  updatedAt             DateTime?              @default(now()) @updatedAt @db.Timestamp(6)
  patient               Patient                @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "medicine_patientid_fkey")
  medicineConsumptions  MedicineConsumption[]
  medicineNotifications MedicineNotification[]

  @@index([isActive], map: "idx_medicine_isactive")
  @@index([patientId], map: "idx_medicine_patientid")
  @@map("medicine")
}

model MedicineNotification {
  id                   Int                   @id @default(autoincrement())
  patientId            Int
  medicineId           Int
  title                String                @db.VarChar(200)
  message              String?
  scheduledTime        DateTime              @db.Time(6)
  timeType             String                @db.VarChar(20)
  isActive             Boolean?              @default(true)
  createdAt            DateTime?             @default(now()) @db.Timestamp(6)
  updatedAt            DateTime?             @default(now()) @updatedAt @db.Timestamp(6)
  groupId              String?               @map("group_id") @db.VarChar(100)
  medicineConsumptions MedicineConsumption[]
  medicine             Medicine              @relation(fields: [medicineId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "medicine_notifications_medicineid_fkey")
  patient              Patient               @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "medicine_notifications_patientid_fkey")

  @@index([isActive], map: "idx_medicine_notifications_isactive")
  @@index([medicineId], map: "idx_medicine_notifications_medicineid")
  @@index([patientId], map: "idx_medicine_notifications_patientid")
  @@index([timeType], map: "idx_medicine_notifications_timetype")
  @@map("medicine_notifications")
}

model MedicineConsumption {
  id             Int                   @id @default(autoincrement())
  patientId      Int
  medicineId     Int
  notificationId Int?
  scheduledAt    DateTime              @db.Timestamp(6)
  consumedAt     DateTime?             @db.Timestamp(6)
  dosageTaken    Int?
  status         String?               @default("pending") @db.VarChar(20)
  notes          String?
  createdAt      DateTime?             @default(now()) @db.Timestamp(6)
  updatedAt      DateTime?             @default(now()) @updatedAt @db.Timestamp(6)
  medicine       Medicine              @relation(fields: [medicineId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "medicine_consumption_medicineid_fkey")
  notification   MedicineNotification? @relation(fields: [notificationId], references: [id], onUpdate: NoAction, map: "medicine_consumption_notificationid_fkey")
  patient        Patient               @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "medicine_consumption_patientid_fkey")

  @@index([medicineId], map: "idx_medicine_consumption_medicineid")
  @@index([patientId], map: "idx_medicine_consumption_patientid")
  @@index([scheduledAt], map: "idx_medicine_consumption_scheduledat")
  @@index([status], map: "idx_medicine_consumption_status")
  @@map("medicine_consumption")
}

model Prescription {
  id               Int       @id @default(autoincrement())
  patientId        Int
  title            String    @db.VarChar(200)
  description      String?
  imageUrl         String
  filePath         String
  fileSize         Int?
  fileType         String?   @db.VarChar(50)
  prescriptionDate DateTime? @db.Date
  doctorName       String?   @db.VarChar(100)
  hospitalName     String?   @db.VarChar(200)
  isActive         Boolean?  @default(true)
  createdAt        DateTime? @default(now()) @db.Timestamp(6)
  updatedAt        DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  patient          Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "prescriptions_patientid_fkey")

  @@index([patientId], map: "idx_prescriptions_patientid")
  @@map("prescriptions")
}
