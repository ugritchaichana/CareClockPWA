generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id                    Int                     @id @default(autoincrement())
  prefix                String                  @db.VarChar(20)
  firstName             String                  @db.VarChar(100)
  lastName              String                  @db.VarChar(100)
  age                   Int
  phoneNumber           String                  @unique @db.VarChar(20)
  medicalRight          String?                 @db.VarChar(100)
  chronicDiseases       String?
  drugAllergy           String?
  profileImageUrl       String?
  registeredAt          DateTime                @default(now()) @db.Timestamp(6)
  createdAt             DateTime                @default(now()) @db.Timestamp(6)
  updatedAt             DateTime                @updatedAt @db.Timestamp(6)
  medicines             Medicine[]
  medicineNotifications MedicineNotification[]
  medicineConsumptions  MedicineConsumption[]
  prescriptions         Prescription[]

  @@map("patients")
}

model Medicine {
  id                    Int                     @id @default(autoincrement())
  patientId             Int
  medicineName          String                  @db.VarChar(200)
  medicineDetails       String?
  consumptionType       String                  @db.VarChar(100)
  quantity              Int
  currentStock          Int                     @default(0)
  dosage                Int
  morning               Boolean                 @default(false)
  afternoon             Boolean                 @default(false)
  evening               Boolean                 @default(false)
  beforeBed             Boolean                 @default(false)
  medicineImageUrl      String?
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now()) @db.Timestamp(6)
  updatedAt             DateTime                @updatedAt @db.Timestamp(6)
  patient               Patient                 @relation(fields: [patientId], references: [id], onDelete: Cascade)
  medicineNotifications MedicineNotification[]
  medicineConsumptions  MedicineConsumption[]

  @@map("medicine")
}

model MedicineNotification {
  id                   Int                   @id @default(autoincrement())
  patientId            Int
  medicineId           Int
  title                String                @db.VarChar(200)
  message              String?
  scheduledTime        DateTime              @db.Time()
  timeType             String                @db.VarChar(20) // morning, afternoon, evening, beforeBed
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now()) @db.Timestamp(6)
  updatedAt            DateTime              @updatedAt @db.Timestamp(6)
  groupId              String?               @map("group_id") @db.VarChar(100) // For grouping notifications created together
  patient              Patient               @relation(fields: [patientId], references: [id], onDelete: Cascade)
  medicine             Medicine              @relation(fields: [medicineId], references: [id], onDelete: Cascade)
  medicineConsumptions MedicineConsumption[]

  @@map("medicine_notifications")
}

model MedicineConsumption {
  id             Int                   @id @default(autoincrement())
  patientId      Int
  medicineId     Int
  notificationId Int?
  scheduledAt    DateTime              @db.Timestamp(6)
  consumedAt     DateTime?             @db.Timestamp(6)
  dosageTaken    Int?
  status         String                @default("pending") @db.VarChar(20) // pending, taken, skipped, missed
  notes          String?
  createdAt      DateTime              @default(now()) @db.Timestamp(6)
  updatedAt      DateTime              @updatedAt @db.Timestamp(6)
  patient        Patient               @relation(fields: [patientId], references: [id], onDelete: Cascade)
  medicine       Medicine              @relation(fields: [medicineId], references: [id], onDelete: Cascade)
  notification   MedicineNotification? @relation(fields: [notificationId], references: [id], onDelete: SetNull)

  @@map("medicine_consumption")
}



model Prescription {
  id               Int       @id @default(autoincrement())
  patientId        Int
  title            String    @db.VarChar(200)
  description      String?
  imageUrl         String
  filePath         String
  fileSize         Int?
  fileType         String?   @db.VarChar(50)
  prescriptionDate DateTime? @db.Date
  doctorName       String?   @db.VarChar(100)
  hospitalName     String?   @db.VarChar(200)
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now()) @db.Timestamp(6)
  updatedAt        DateTime  @updatedAt @db.Timestamp(6)
  patient          Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("prescriptions")
}
