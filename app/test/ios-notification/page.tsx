// iOS Notification Test Page
'use client'

import { useState } from 'react'
import { notificationManager } from '../../../lib/notificationManager'

export default function IOSNotificationTest() {
  const [testResults, setTestResults] = useState<string[]>([])
  const [isTestingAudio, setIsTestingAudio] = useState(false)
  const [isTestingVibration, setIsTestingVibration] = useState(false)
  const [isTestingNotification, setIsTestingNotification] = useState(false)

  const addResult = (result: string) => {
    setTestResults(prev => [...prev, `${new Date().toLocaleTimeString()}: ${result}`])
  }

  const testAudio = async () => {
    setIsTestingAudio(true)
    addResult('ЁЯФК р╣Ар╕гр╕┤р╣Ир╕бр╕Чр╕Фр╕кр╕нр╕Ър╣Ар╕кр╕╡р╕вр╕З...')
    
    try {
      // Initialize audio with user interaction
      await notificationManager.initializeAudioWithUserInteraction()
      addResult('тЬЕ р╣Ар╕кр╕╡р╕вр╕Зр╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕кр╕│р╣Ар╕гр╣Зр╕И')
      
      // Create test notification to trigger sound
      const testNotification = {
        id: 'test-audio',
        medicineId: 1,
        medicineName: 'р╕Чр╕Фр╕кр╕нр╕Ъ',
        title: 'р╕Чр╕Фр╕кр╕нр╕Ър╣Ар╕кр╕╡р╕вр╕З',
        message: 'р╕Чр╕Фр╕кр╕нр╕Ър╣Ар╕кр╕╡р╕вр╕Зр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ',
        scheduledTime: new Date().toTimeString().substring(0, 5),
        timeType: 'test',
        isActive: true,
        dosage: 1,
        soundEnabled: true,
        vibrationEnabled: false
      }
      
      notificationManager.addNotification(testNotification)
      addResult('ЁЯО╡ р╣Ар╕ер╣Ир╕Щр╣Ар╕кр╕╡р╕вр╕Зр╕Чр╕Фр╕кр╕нр╕Ъ')
      
      setTimeout(() => {
        notificationManager.removeNotification('test-audio')
        addResult('ЁЯФЗ р╕лр╕вр╕╕р╕Фр╣Ар╕кр╕╡р╕вр╕Зр╕Чр╕Фр╕кр╕нр╕Ъ')
      }, 3000)
      
    } catch (error) {
      addResult(`тЭМ р╣Ар╕кр╕╡р╕вр╕Зр╕ер╣Йр╕бр╣Ар╕лр╕ер╕з: ${error}`)
    } finally {
      setIsTestingAudio(false)
    }
  }

  const testVibration = () => {
    setIsTestingVibration(true)
    addResult('ЁЯУ│ р╣Ар╕гр╕┤р╣Ир╕бр╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕кр╕▒р╣Ир╕Щ...')
    
    try {
      if ('vibrate' in navigator) {
        // iOS-compatible vibration pattern
        const pattern = [200, 100, 200, 100, 200]
        navigator.vibrate(pattern)
        addResult('тЬЕ р╕Бр╕▓р╕гр╕кр╕▒р╣Ир╕Щр╕Чр╕│р╕Зр╕▓р╕Щ')
        
        // Test again after 2 seconds
        setTimeout(() => {
          navigator.vibrate([300, 150, 300])
          addResult('ЁЯФД р╕Бр╕▓р╕гр╕кр╕▒р╣Ир╕Щр╕Др╕гр╕▒р╣Йр╕Зр╕Чр╕╡р╣И 2')
        }, 2000)
      } else {
        addResult('тЭМ р╣Ар╕Ър╕гр╕▓р╕зр╣Мр╣Ар╕Лр╕нр╕гр╣Мр╣Др╕бр╣Ир╕гр╕нр╕Зр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕кр╕▒р╣Ир╕Щ')
      }
    } catch (error) {
      addResult(`тЭМ р╕Бр╕▓р╕гр╕кр╕▒р╣Ир╕Щр╕ер╣Йр╕бр╣Ар╕лр╕ер╕з: ${error}`)
    } finally {
      setTimeout(() => setIsTestingVibration(false), 3000)
    }
  }

  const testNotification = async () => {
    setIsTestingNotification(true)
    addResult('ЁЯФФ р╣Ар╕гр╕┤р╣Ир╕бр╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ...')
    
    try {
      // Request permission
      const hasPermission = await notificationManager.requestNotificationPermission()
      
      if (!hasPermission) {
        addResult('тЭМ р╣Др╕бр╣Ир╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕нр╕Щр╕╕р╕Нр╕▓р╕Хр╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ')
        setIsTestingNotification(false)
        return
      }
      
      addResult('тЬЕ р╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕нр╕Щр╕╕р╕Нр╕▓р╕Хр╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╣Бр╕ер╣Йр╕з')
      
      // Show test notification
      const notificationOptions: NotificationOptions = {
        body: 'р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Ър╕Щ iOS р╕Юр╕гр╣Йр╕нр╕бр╣Ар╕кр╕╡р╕вр╕Зр╣Бр╕ер╕░р╕Бр╕▓р╕гр╕кр╕▒р╣Ир╕Щ',
        icon: '/asset/CareClockLOGO.PNG',
        badge: '/asset/CareClockLOGO.PNG',
        tag: 'ios-test',
        requireInteraction: true,
        silent: false, // Enable sound
      }

      // Add vibration for supported browsers
      if ('vibrate' in navigator) {
        (notificationOptions as any).vibrate = [200, 100, 200, 100, 200]
      }

      const testNotif = new Notification('CareClock - р╕Чр╕Фр╕кр╕нр╕Ъ iOS', notificationOptions)
      
      addResult('ЁЯОп р╣Бр╕кр╕Фр╕Зр╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Чр╕Фр╕кр╕нр╕Ъ')
      
      testNotif.onclick = () => {
        addResult('ЁЯСЖ р╕Др╕ер╕┤р╕Бр╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ')
        testNotif.close()
      }
      
      // Auto close after 10 seconds
      setTimeout(() => {
        testNotif.close()
        addResult('тП░ р╕Ыр╕┤р╕Фр╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤')
      }, 10000)
      
    } catch (error) {
      addResult(`тЭМ р╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕ер╣Йр╕бр╣Ар╕лр╕ер╕з: ${error}`)
    } finally {
      setIsTestingNotification(false)
    }
  }

  const clearResults = () => {
    setTestResults([])
  }

  const checkPlatform = () => {
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) || 
                  (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1)
    const userAgent = navigator.userAgent
    const platform = navigator.platform
    
    addResult(`ЁЯУ▒ Platform: ${platform}`)
    addResult(`ЁЯМР User Agent: ${userAgent}`)
    addResult(`ЁЯНО Is iOS: ${isIOS ? 'Yes' : 'No'}`)
    addResult(`ЁЯФФ Notification Support: ${'Notification' in window ? 'Yes' : 'No'}`)
    addResult(`ЁЯУ│ Vibration Support: ${'vibrate' in navigator ? 'Yes' : 'No'}`)
    addResult(`ЁЯО╡ Audio Context Support: ${'AudioContext' in window || 'webkitAudioContext' in window ? 'Yes' : 'No'}`)
    addResult(`ЁЯФР Notification Permission: ${Notification.permission}`)
  }

  return (
    <div className="container mx-auto max-w-2xl p-6">
      {/* Back to Home Button */}
      <div className="mb-6">
        <button
          onClick={() => window.location.href = '/'}
          className="bg-gradient-to-r from-pink-500 to-rose-500 text-white rounded-2xl px-4 py-2 font-semibold shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-[1.02] active:scale-[0.98] flex items-center gap-2"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
          <span>ЁЯПа р╕Бр╕ер╕▒р╕Ър╣Др╕Ыр╕лр╕Щр╣Йр╕▓р╣Бр╕гр╕Б</span>
        </button>
      </div>

      <div className="text-center mb-8">
        <h1 className="text-2xl font-bold text-gray-800 mb-2">
          р╕Чр╕Фр╕кр╕нр╕Ъ Notification р╕кр╕│р╕лр╕гр╕▒р╕Ъ iOS
        </h1>
        <p className="text-gray-600">
          р╕Чр╕Фр╕кр╕нр╕Ър╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣Мр╣Ар╕кр╕╡р╕вр╕З р╕Бр╕▓р╕гр╕кр╕▒р╣Ир╕Щ р╣Бр╕ер╕░р╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Ър╕Щр╕нр╕╕р╕Ыр╕Бр╕гр╕Ур╣М iOS
        </p>
      </div>

      {/* Test Buttons */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <button
          onClick={checkPlatform}
          className="btn btn-info text-white"
        >
          ЁЯУ▒ р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Бр╕Юр╕ер╕Хр╕Яр╕нр╕гр╣Мр╕б
        </button>
        
        <button
          onClick={testAudio}
          disabled={isTestingAudio}
          className="btn btn-primary text-white"
        >
          {isTestingAudio ? 'ЁЯФК р╕Бр╕│р╕ер╕▒р╕Зр╕Чр╕Фр╕кр╕нр╕Ъ...' : 'ЁЯФК р╕Чр╕Фр╕кр╕нр╕Ър╣Ар╕кр╕╡р╕вр╕З'}
        </button>
        
        <button
          onClick={testVibration}
          disabled={isTestingVibration}
          className="btn btn-secondary text-white"
        >
          {isTestingVibration ? 'ЁЯУ│ р╕Бр╕│р╕ер╕▒р╕Зр╕кр╕▒р╣Ир╕Щ...' : 'ЁЯУ│ р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕кр╕▒р╣Ир╕Щ'}
        </button>
        
        <button
          onClick={testNotification}
          disabled={isTestingNotification}
          className="btn btn-success text-white"
        >
          {isTestingNotification ? 'ЁЯФФ р╕Бр╕│р╕ер╕▒р╕Зр╕Чр╕Фр╕кр╕нр╕Ъ...' : 'ЁЯФФ р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ'}
        </button>
      </div>

      {/* Clear Results Button */}
      <div className="text-center mb-6">
        <button
          onClick={clearResults}
          className="btn btn-outline btn-sm"
        >
          ЁЯЧСя╕П р╕ер╣Йр╕▓р╕Зр╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М
        </button>
      </div>

      {/* Test Results */}
      <div className="card bg-base-100 shadow-xl">
        <div className="card-body">
          <h2 className="card-title">ЁЯУЛ р╕Ьр╕ер╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ</h2>
          
          {testResults.length === 0 ? (
            <p className="text-gray-500 text-center py-8">
              р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡р╕Ьр╕ер╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ р╕Бр╕Фр╕Ыр╕╕р╣Ир╕бр╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕гр╕┤р╣Ир╕бр╕Чр╕Фр╕кр╕нр╕Ъ
            </p>
          ) : (
            <div className="space-y-2 max-h-96 overflow-y-auto">
              {testResults.map((result, index) => (
                <div
                  key={index}
                  className="p-3 bg-gray-50 rounded-lg text-sm font-mono"
                >
                  {result}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Instructions */}
      <div className="mt-6 alert alert-info">
        <div>
          <h3 className="font-bold">ЁЯТб р╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╕кр╕│р╕лр╕гр╕▒р╕Ъ iOS:</h3>
          <ul className="list-disc list-inside text-sm mt-2 space-y-1">
            <li>р╕Бр╕Фр╕Ыр╕╕р╣Ир╕б "р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Бр╕Юр╕ер╕Хр╕Яр╕нр╕гр╣Мр╕б" р╕Бр╣Ир╕нр╕Щр╣Ар╕Юр╕╖р╣Ир╕нр╕Фр╕╣р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕гр╕░р╕Ър╕Ъ</li>
            <li>р╕кр╕│р╕лр╕гр╕▒р╕Ъ iOS р╕Хр╣Йр╕нр╕Зр╕бр╕╡ user interaction р╕Бр╣Ир╕нр╕Щр╣Ар╕ер╣Ир╕Щр╣Ар╕кр╕╡р╕вр╕З</li>
            <li>р╕Бр╕▓р╕гр╕кр╕▒р╣Ир╕Щр╕Ир╕░р╕Чр╕│р╕Зр╕▓р╕Щр╕Ър╕Щ iPhone (р╣Др╕бр╣Ир╣Гр╕Кр╣И iPad)</li>
            <li>р╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Хр╣Йр╕нр╕Зр╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕нр╕Щр╕╕р╕Нр╕▓р╕Хр╕Ир╕▓р╕Бр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Бр╣Ир╕нр╕Щ</li>
            <li>р╕Цр╣Йр╕▓р╣Ар╕Ыр╣Зр╕Щ iOS Safari р╕ер╕нр╕Зр╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕зр╣Зр╕Ър╣Др╕Лр╕Хр╣Мр╕ер╕З Home Screen</li>
          </ul>
        </div>
      </div>
    </div>
  )
}
