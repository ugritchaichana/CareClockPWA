'use client'

import { useEffect, useState } from 'react'
import { localStorageService } from '@/lib/localStorage'

export default function Home() {
  const [isOnline, setIsOnline] = useState(true)
  const [data, setData] = useState<any>(null)
  const [loading, setLoading] = useState(false)
  const [dbStatus, setDbStatus] = useState<string>('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö')
  const [dbTesting, setDbTesting] = useState(false)

  useEffect(() => {
    // Check online status
    setIsOnline(navigator.onLine)
    
    const handleOnline = () => setIsOnline(true)
    const handleOffline = () => setIsOnline(false)
    
    window.addEventListener('online', handleOnline)
    window.addEventListener('offline', handleOffline)
    
    // Load data from localStorage
    const savedData = localStorageService.getItem('app-data')
    if (savedData) {
      setData(savedData)
    }
    
    return () => {
      window.removeEventListener('online', handleOnline)
      window.removeEventListener('offline', handleOffline)
    }
  }, [])

  const handleSaveData = () => {
    const newData = {
      timestamp: new Date().toISOString(),
      message: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ PWA ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
      count: (data?.count || 0) + 1
    }
    
    setData(newData)
    localStorageService.setItem('app-data', newData)
  }

  const handleLoadFromServer = async () => {
    setLoading(true)
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000))
      const serverData = {
        timestamp: new Date().toISOString(),
        message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
        serverSync: true
      }
      setData(serverData)
      localStorageService.setItem('server-data', serverData)
    } catch (error) {
      console.error('Error loading from server:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleTestDatabase = async () => {
    setDbTesting(true)
    try {
      const response = await fetch('/api/test-db')
      const result = await response.json()
      
      if (result.success) {
        setDbStatus(`‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${result.collections.length} collections)`)
        setData({
          ...data,
          dbTest: result
        })
      } else {
        setDbStatus(`‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result.error}`)
      }
    } catch (error) {
      setDbStatus(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error}`)
    } finally {
      setDbTesting(false)
    }
  }

  const handleSaveToDatabase = async () => {
    setLoading(true)
    try {
      const testData = {
        message: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å PWA',
        timestamp: new Date().toISOString(),
        type: 'test-data',
        count: (data?.count || 0) + 1
      }

      const response = await fetch('/api/test-db', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(testData),
      })

      const result = await response.json()
      
      if (result.success) {
        setData({
          ...testData,
          savedToDb: result
        })
        localStorageService.setItem('last-db-save', result)
      } else {
        console.error('Database save failed:', result.error)
      }
    } catch (error) {
      console.error('Error saving to database:', error)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="pwa-container safe-area-top safe-area-bottom">
      {/* Header */}
      <header className="bg-white shadow-sm border-b p-4">
        <div className="flex items-center justify-between">
          <h1 className="text-2xl font-bold text-gray-900">CareClockPWA</h1>
          <div className="flex items-center space-x-2">
            <div className={`w-3 h-3 rounded-full ${isOnline ? 'bg-green-500' : 'bg-red-500'}`}></div>
            <span className="text-sm text-gray-600">
              {isOnline ? '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå' : '‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå'}
            </span>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <div className="p-4">
        <div className="card mb-4">
          <h2 className="text-xl font-semibold mb-4 text-gray-800">
            ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà PWA ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
          </h2>
          <p className="text-gray-600 mb-4">
            ‡πÅ‡∏≠‡∏û‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å 
            ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡∏∞ LocalStorage
          </p>
          
          {/* Feature Cards */}
          <div className="grid grid-1 gap-4 mb-4">
            <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
              <h3 className="font-semibold text-blue-800 mb-2">üì± Mobile-First Design</h3>
              <p className="text-blue-600 text-sm">‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å</p>
            </div>
            
            <div className="p-4 bg-green-50 rounded-lg border border-green-200">
              <h3 className="font-semibold text-green-800 mb-2">üíæ LocalStorage</h3>
              <p className="text-green-600 text-sm">‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏î‡πâ</p>
            </div>
              <div className="p-4 bg-purple-50 rounded-lg border border-purple-200">
              <h3 className="font-semibold text-purple-800 mb-2">üîÑ Offline Support</h3>
              <p className="text-purple-600 text-sm">‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï</p>
            </div>

            <div className="p-4 bg-orange-50 rounded-lg border border-orange-200">
              <h3 className="font-semibold text-orange-800 mb-2">üóÑÔ∏è MongoDB Atlas</h3>
              <p className="text-orange-600 text-sm">‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏≤‡∏ß‡∏î‡πå</p>
              <p className="text-xs text-orange-500 mt-1">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {dbStatus}</p>
            </div>
          </div>

          {/* Data Display */}
          {data && (
            <div className="p-4 bg-gray-50 rounded-lg mb-4">
              <h3 className="font-semibold mb-2">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:</h3>
              <pre className="text-sm text-gray-700 bg-white p-2 rounded border overflow-auto">
                {JSON.stringify(data, null, 2)}
              </pre>
            </div>
          )}          {/* Action Buttons */}
          <div className="grid grid-1 gap-3">
            <button 
              onClick={handleTestDatabase}
              disabled={dbTesting}
              className="btn-primary w-full disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {dbTesting ? (
                <span className="flex items-center justify-center">
                  <div className="spinner mr-2"></div>
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö MongoDB...
                </span>
              ) : (
                'üóÑÔ∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB Atlas'
              )}
            </button>

            <button 
              onClick={handleSaveData}
              className="btn-primary w-full"
            >
              üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô LocalStorage
            </button>

            <button 
              onClick={handleSaveToDatabase}
              disabled={loading || !isOnline}
              className="btn-primary w-full disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? (
                <span className="flex items-center justify-center">
                  <div className="spinner mr-2"></div>
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô DB...
                </span>
              ) : (
                '‚òÅÔ∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô MongoDB Atlas'
              )}
            </button>
            
            <button 
              onClick={handleLoadFromServer}
              disabled={loading || !isOnline}
              className="btn-primary w-full disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? (
                <span className="flex items-center justify-center">
                  <div className="spinner mr-2"></div>
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...
                </span>
              ) : (
                'üåê ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå'
              )}
            </button>

            {/* Database Test & Save Buttons */}
            <div className="grid grid-1 gap-3">
              <button 
                onClick={handleTestDatabase}
                disabled={dbTesting}
                className="btn-primary w-full disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {dbTesting ? (
                  <span className="flex items-center justify-center">
                    <div className="spinner mr-2"></div>
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...
                  </span>
                ) : (
                  'üõ†Ô∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
                )}
              </button>
              
              <button 
                onClick={handleSaveToDatabase}
                disabled={loading || !data}
                className="btn-primary w-full disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {loading ? (
                  <span className="flex items-center justify-center">
                    <div className="spinner mr-2"></div>
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...
                  </span>
                ) : (
                  'üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
                )}
              </button>
            </div>

            {/* Database Status Display */}
            <div className="p-4 bg-gray-50 rounded-lg mb-4">
              <h3 className="font-semibold mb-2">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</h3>
              <p className="text-sm text-gray-700">
                {dbStatus}
              </p>
            </div>
          </div>
        </div>

        {/* PWA Info */}
        <div className="card">
          <h3 className="font-semibold mb-2">üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PWA</h3>
          <div className="text-sm text-gray-600 space-y-1">
            <p>‚Ä¢ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏û‡πÑ‡∏î‡πâ</p>
            <p>‚Ä¢ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå</p>
            <p>‚Ä¢ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠</p>
            <p>‚Ä¢ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡πÑ‡∏î‡πâ</p>
            <p>‚Ä¢ ‡πÉ‡∏ä‡πâ LocalStorage ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
          </div>
        </div>
      </div>

      {/* Mobile Navigation */}
      <nav className="mobile-nav">
        <div className="flex justify-around items-center py-2">
          <button className="flex flex-col items-center p-2 text-blue-600">
            <span className="text-lg">üè†</span>
            <span className="text-xs">‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</span>
          </button>
          <button className="flex flex-col items-center p-2 text-gray-400">
            <span className="text-lg">üìä</span>
            <span className="text-xs">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</span>
          </button>
          <button className="flex flex-col items-center p-2 text-gray-400">
            <span className="text-lg">‚öôÔ∏è</span>
            <span className="text-xs">‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</span>
          </button>
        </div>
      </nav>
    </div>
  )
}
